// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_xfft2real_Loop_ifft_be_descramble_proc4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        dout_V_TDATA,
        dout_V_TVALID,
        dout_V_TREADY,
        filter_buf_0_M_imag_V_address0,
        filter_buf_0_M_imag_V_ce0,
        filter_buf_0_M_imag_V_q0,
        filter_buf_0_M_imag_V_address1,
        filter_buf_0_M_imag_V_ce1,
        filter_buf_0_M_imag_V_q1,
        filter_buf_1_M_imag_V_address0,
        filter_buf_1_M_imag_V_ce0,
        filter_buf_1_M_imag_V_q0,
        filter_buf_1_M_imag_V_address1,
        filter_buf_1_M_imag_V_ce1,
        filter_buf_1_M_imag_V_q1,
        filter_buf_0_M_real_V_address0,
        filter_buf_0_M_real_V_ce0,
        filter_buf_0_M_real_V_q0,
        filter_buf_0_M_real_V_address1,
        filter_buf_0_M_real_V_ce1,
        filter_buf_0_M_real_V_q1,
        filter_buf_1_M_real_V_address0,
        filter_buf_1_M_real_V_ce0,
        filter_buf_1_M_real_V_q0,
        filter_buf_1_M_real_V_address1,
        filter_buf_1_M_real_V_ce1,
        filter_buf_1_M_real_V_q1,
        twid_rom_conj_M_real_V_address0,
        twid_rom_conj_M_real_V_ce0,
        twid_rom_conj_M_real_V_q0,
        twid_rom_conj_M_imag_V_address0,
        twid_rom_conj_M_imag_V_ce0,
        twid_rom_conj_M_imag_V_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state8 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [63:0] dout_V_TDATA;
output   dout_V_TVALID;
input   dout_V_TREADY;
output  [8:0] filter_buf_0_M_imag_V_address0;
output   filter_buf_0_M_imag_V_ce0;
input  [30:0] filter_buf_0_M_imag_V_q0;
output  [8:0] filter_buf_0_M_imag_V_address1;
output   filter_buf_0_M_imag_V_ce1;
input  [30:0] filter_buf_0_M_imag_V_q1;
output  [8:0] filter_buf_1_M_imag_V_address0;
output   filter_buf_1_M_imag_V_ce0;
input  [30:0] filter_buf_1_M_imag_V_q0;
output  [8:0] filter_buf_1_M_imag_V_address1;
output   filter_buf_1_M_imag_V_ce1;
input  [30:0] filter_buf_1_M_imag_V_q1;
output  [8:0] filter_buf_0_M_real_V_address0;
output   filter_buf_0_M_real_V_ce0;
input  [30:0] filter_buf_0_M_real_V_q0;
output  [8:0] filter_buf_0_M_real_V_address1;
output   filter_buf_0_M_real_V_ce1;
input  [30:0] filter_buf_0_M_real_V_q1;
output  [8:0] filter_buf_1_M_real_V_address0;
output   filter_buf_1_M_real_V_ce0;
input  [30:0] filter_buf_1_M_real_V_q0;
output  [8:0] filter_buf_1_M_real_V_address1;
output   filter_buf_1_M_real_V_ce1;
input  [30:0] filter_buf_1_M_real_V_q1;
output  [9:0] twid_rom_conj_M_real_V_address0;
output   twid_rom_conj_M_real_V_ce0;
input  [23:0] twid_rom_conj_M_real_V_q0;
output  [9:0] twid_rom_conj_M_imag_V_address0;
output   twid_rom_conj_M_imag_V_ce0;
input  [22:0] twid_rom_conj_M_imag_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg filter_buf_0_M_imag_V_ce0;
reg filter_buf_0_M_imag_V_ce1;
reg filter_buf_1_M_imag_V_ce0;
reg filter_buf_1_M_imag_V_ce1;
reg filter_buf_0_M_real_V_ce0;
reg filter_buf_0_M_real_V_ce1;
reg filter_buf_1_M_real_V_ce0;
reg filter_buf_1_M_real_V_ce1;
reg twid_rom_conj_M_real_V_ce0;
reg twid_rom_conj_M_imag_V_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dout_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln114_reg_846;
reg   [0:0] icmp_ln114_reg_846_pp0_iter3_reg;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] icmp_ln114_reg_846_pp0_iter4_reg;
reg   [10:0] i_reg_217;
wire   [10:0] add_ln114_fu_229_p2;
reg   [10:0] add_ln114_reg_841;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state6_io;
reg    ap_block_state7_pp0_stage0_iter5;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln114_fu_235_p2;
reg   [0:0] icmp_ln114_reg_846_pp0_iter1_reg;
reg   [0:0] icmp_ln114_reg_846_pp0_iter2_reg;
wire   [63:0] zext_ln116_fu_249_p1;
reg   [63:0] zext_ln116_reg_850;
wire   [63:0] zext_ln703_fu_265_p1;
reg   [63:0] zext_ln703_reg_866;
reg   [0:0] tmp_9_reg_872;
reg   [0:0] tmp_9_reg_872_pp0_iter1_reg;
wire   [0:0] icmp_ln116_fu_295_p2;
reg   [0:0] icmp_ln116_reg_888;
wire   [30:0] lhs_V_fu_301_p3;
reg   [30:0] lhs_V_reg_893;
wire   [0:0] icmp_ln118_fu_309_p2;
reg   [0:0] icmp_ln118_reg_908;
reg   [0:0] icmp_ln118_reg_908_pp0_iter2_reg;
reg   [0:0] icmp_ln118_reg_908_pp0_iter3_reg;
wire   [30:0] rhs_V_4_fu_315_p3;
reg   [30:0] rhs_V_4_reg_923;
wire  signed [31:0] sext_ln1192_fu_329_p1;
reg  signed [31:0] sext_ln1192_reg_938;
reg  signed [31:0] sext_ln1192_reg_938_pp0_iter3_reg;
wire  signed [31:0] sext_ln1193_fu_332_p1;
reg  signed [31:0] sext_ln1193_reg_945;
reg  signed [31:0] sext_ln1193_reg_945_pp0_iter3_reg;
wire  signed [31:0] sext_ln703_fu_343_p1;
reg  signed [31:0] sext_ln703_reg_952;
reg  signed [31:0] sext_ln703_reg_952_pp0_iter3_reg;
wire  signed [31:0] sext_ln1193_1_fu_347_p1;
reg  signed [31:0] sext_ln1193_1_reg_957;
reg  signed [31:0] sext_ln1193_1_reg_957_pp0_iter3_reg;
wire   [31:0] g_M_real_V_fu_410_p3;
reg   [31:0] g_M_real_V_reg_962;
wire  signed [31:0] g_M_imag_V_fu_466_p3;
reg  signed [31:0] g_M_imag_V_reg_967;
reg   [23:0] twid_rom_conj_M_real_V_load_reg_973;
reg   [22:0] twid_rom_conj_M_imag_V_load_reg_978;
wire   [62:0] r_V_13_fu_494_p2;
reg   [62:0] r_V_13_reg_983;
wire   [62:0] r_V_10_fu_500_p2;
reg   [62:0] r_V_10_reg_988;
wire   [62:0] r_V_14_fu_521_p2;
reg   [62:0] r_V_14_reg_993;
wire   [61:0] r_V_12_fu_527_p2;
reg   [61:0] r_V_12_reg_998;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [10:0] ap_phi_mux_i_phi_fu_221_p4;
wire   [63:0] zext_ln114_fu_279_p1;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] trunc_ln116_fu_245_p1;
wire   [9:0] trunc_ln114_fu_241_p1;
wire   [9:0] sub_ln703_fu_255_p2;
wire   [8:0] trunc_ln703_fu_261_p1;
wire   [1:0] tmp_6_fu_285_p4;
wire   [30:0] rhs_V_fu_322_p3;
wire   [30:0] select_ln703_fu_336_p3;
wire  signed [31:0] ret_V_fu_356_p2;
wire  signed [32:0] sext_ln1192_3_fu_362_p1;
wire   [32:0] sub_ln1148_12_fu_374_p2;
wire   [30:0] trunc_ln1148_11_fu_390_p4;
wire  signed [31:0] sext_ln1148_6_fu_400_p1;
wire   [0:0] tmp_12_fu_366_p3;
wire   [31:0] trunc_ln1148_10_fu_380_p4;
wire   [31:0] sub_ln1148_13_fu_404_p2;
wire   [31:0] ret_V_18_fu_350_p2;
wire   [31:0] sub_ln1148_14_fu_426_p2;
wire   [30:0] trunc_ln1148_12_fu_432_p4;
wire   [30:0] trunc_ln1148_13_fu_446_p4;
wire  signed [31:0] sext_ln1148_7_fu_442_p1;
wire   [0:0] tmp_13_fu_418_p3;
wire   [31:0] sub_ln1148_15_fu_460_p2;
wire  signed [31:0] sext_ln1148_8_fu_456_p1;
wire   [31:0] r_V_fu_483_p3;
wire  signed [31:0] r_V_13_fu_494_p0;
wire  signed [62:0] sext_ln1115_fu_490_p1;
wire  signed [31:0] r_V_10_fu_500_p0;
wire  signed [31:0] r_V_10_fu_500_p1;
wire  signed [62:0] sext_ln1118_fu_474_p1;
wire   [30:0] r_V_11_fu_506_p3;
wire  signed [31:0] r_V_14_fu_521_p0;
wire   [30:0] r_V_14_fu_521_p1;
wire   [30:0] r_V_12_fu_527_p1;
wire  signed [31:0] ret_V_14_fu_537_p2;
wire  signed [32:0] sext_ln1192_1_fu_541_p1;
wire   [32:0] sub_ln1148_fu_553_p2;
wire   [30:0] trunc_ln1148_s_fu_569_p4;
wire   [31:0] trunc_ln1148_1_fu_559_p4;
wire   [0:0] tmp_7_fu_545_p3;
wire   [31:0] sub_ln1148_1_fu_583_p2;
wire  signed [31:0] sext_ln1148_fu_579_p1;
wire   [31:0] ret_V_15_fu_533_p2;
wire   [31:0] sub_ln1148_2_fu_605_p2;
wire   [30:0] trunc_ln1148_4_fu_611_p4;
wire   [30:0] trunc_ln1148_5_fu_625_p4;
wire  signed [31:0] sext_ln1148_1_fu_621_p1;
wire   [0:0] tmp_8_fu_597_p3;
wire   [31:0] sub_ln1148_3_fu_639_p2;
wire  signed [31:0] sext_ln1148_2_fu_635_p1;
wire   [31:0] select_ln1148_1_fu_645_p3;
wire   [31:0] select_ln1148_fu_589_p3;
wire  signed [31:0] ret_V_16_fu_661_p2;
wire  signed [32:0] sext_ln1192_2_fu_665_p1;
wire   [32:0] sub_ln1148_8_fu_677_p2;
wire   [30:0] trunc_ln1148_7_fu_693_p4;
wire   [31:0] trunc_ln1148_6_fu_683_p4;
wire   [0:0] tmp_10_fu_669_p3;
wire   [31:0] sub_ln1148_9_fu_707_p2;
wire  signed [31:0] sext_ln1148_3_fu_703_p1;
wire   [31:0] ret_V_17_fu_721_p2;
wire   [31:0] sub_ln1148_10_fu_733_p2;
wire   [30:0] trunc_ln1148_8_fu_739_p4;
wire   [30:0] trunc_ln1148_9_fu_753_p4;
wire  signed [31:0] sext_ln1148_4_fu_749_p1;
wire   [0:0] tmp_11_fu_725_p3;
wire   [31:0] sub_ln1148_11_fu_767_p2;
wire  signed [31:0] sext_ln1148_5_fu_763_p1;
wire  signed [62:0] sext_ln1193_2_fu_785_p1;
wire   [62:0] ret_V_12_fu_788_p2;
wire   [31:0] p_r_V_fu_793_p4;
wire   [31:0] f_M_real_V_fu_713_p3;
wire   [62:0] ret_V_13_fu_781_p2;
wire   [31:0] trunc_ln708_3_fu_809_p4;
wire   [31:0] f_M_imag_V_fu_773_p3;
wire   [31:0] p_r_M_imag_V_4_fu_819_p2;
wire   [31:0] p_r_M_real_V_4_fu_803_p2;
wire   [63:0] tmp_fu_653_p3;
wire   [63:0] tmp_1_fu_825_p3;
wire    ap_CS_fsm_state8;
wire    regslice_both_dout_V_U_apdone_blk;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] dout_V_TDATA_int_regslice;
reg    dout_V_TVALID_int_regslice;
wire    dout_V_TREADY_int_regslice;
wire    regslice_both_dout_V_U_vld_out;
wire   [61:0] r_V_12_fu_527_p10;
wire   [62:0] r_V_14_fu_521_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

hls_xfft2real_mul_32s_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_1_1_U30(
    .din0(r_V_13_fu_494_p0),
    .din1(g_M_imag_V_reg_967),
    .dout(r_V_13_fu_494_p2)
);

hls_xfft2real_mul_32s_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_1_1_U31(
    .din0(r_V_10_fu_500_p0),
    .din1(r_V_10_fu_500_p1),
    .dout(r_V_10_fu_500_p2)
);

hls_xfft2real_mul_32s_31ns_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 63 ))
mul_32s_31ns_63_1_1_U32(
    .din0(r_V_14_fu_521_p0),
    .din1(r_V_14_fu_521_p1),
    .dout(r_V_14_fu_521_p2)
);

hls_xfft2real_mul_32s_31ns_62_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 62 ))
mul_32s_31ns_62_1_1_U33(
    .din0(g_M_imag_V_reg_967),
    .din1(r_V_12_fu_527_p1),
    .dout(r_V_12_fu_527_p2)
);

hls_xfft2real_regslice_both #(
    .DataWidth( 64 ))
regslice_both_dout_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(dout_V_TDATA_int_regslice),
    .vld_in(dout_V_TVALID_int_regslice),
    .ack_in(dout_V_TREADY_int_regslice),
    .data_out(dout_V_TDATA),
    .vld_out(regslice_both_dout_V_U_vld_out),
    .ack_out(dout_V_TREADY),
    .apdone_blk(regslice_both_dout_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_dout_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_217 <= 11'd0;
    end else if (((icmp_ln114_reg_846 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_217 <= add_ln114_reg_841;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln114_reg_841 <= add_ln114_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln118_reg_908 == 1'd0) & (icmp_ln114_reg_846_pp0_iter1_reg == 1'd0))) begin
        g_M_imag_V_reg_967 <= g_M_imag_V_fu_466_p3;
        g_M_real_V_reg_962 <= g_M_real_V_fu_410_p3;
        sext_ln1193_1_reg_957 <= sext_ln1193_1_fu_347_p1;
        sext_ln703_reg_952 <= sext_ln703_fu_343_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln114_reg_846 <= icmp_ln114_fu_235_p2;
        icmp_ln114_reg_846_pp0_iter1_reg <= icmp_ln114_reg_846;
        tmp_9_reg_872_pp0_iter1_reg <= tmp_9_reg_872;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln114_reg_846_pp0_iter2_reg <= icmp_ln114_reg_846_pp0_iter1_reg;
        icmp_ln114_reg_846_pp0_iter3_reg <= icmp_ln114_reg_846_pp0_iter2_reg;
        icmp_ln114_reg_846_pp0_iter4_reg <= icmp_ln114_reg_846_pp0_iter3_reg;
        icmp_ln118_reg_908_pp0_iter2_reg <= icmp_ln118_reg_908;
        icmp_ln118_reg_908_pp0_iter3_reg <= icmp_ln118_reg_908_pp0_iter2_reg;
        sext_ln1192_reg_938_pp0_iter3_reg <= sext_ln1192_reg_938;
        sext_ln1193_1_reg_957_pp0_iter3_reg <= sext_ln1193_1_reg_957;
        sext_ln1193_reg_945_pp0_iter3_reg <= sext_ln1193_reg_945;
        sext_ln703_reg_952_pp0_iter3_reg <= sext_ln703_reg_952;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln114_reg_846 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln116_reg_888 <= icmp_ln116_fu_295_p2;
        icmp_ln118_reg_908 <= icmp_ln118_fu_309_p2;
        lhs_V_reg_893 <= lhs_V_fu_301_p3;
        rhs_V_4_reg_923 <= rhs_V_4_fu_315_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln118_reg_908_pp0_iter2_reg == 1'd0) & (icmp_ln114_reg_846_pp0_iter2_reg == 1'd0))) begin
        r_V_10_reg_988 <= r_V_10_fu_500_p2;
        r_V_12_reg_998 <= r_V_12_fu_527_p2;
        r_V_13_reg_983 <= r_V_13_fu_494_p2;
        r_V_14_reg_993 <= r_V_14_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln114_reg_846_pp0_iter1_reg == 1'd0))) begin
        sext_ln1192_reg_938 <= sext_ln1192_fu_329_p1;
        sext_ln1193_reg_945 <= sext_ln1193_fu_332_p1;
        twid_rom_conj_M_imag_V_load_reg_978 <= twid_rom_conj_M_imag_V_q0;
        twid_rom_conj_M_real_V_load_reg_973 <= twid_rom_conj_M_real_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln114_fu_235_p2 == 1'd0))) begin
        tmp_9_reg_872 <= sub_ln703_fu_255_p2[32'd9];
        zext_ln116_reg_850[8 : 0] <= zext_ln116_fu_249_p1[8 : 0];
        zext_ln703_reg_866[8 : 0] <= zext_ln703_fu_265_p1[8 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln114_fu_235_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_dout_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln114_reg_846 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_221_p4 = add_ln114_reg_841;
    end else begin
        ap_phi_mux_i_phi_fu_221_p4 = i_reg_217;
    end
end

always @ (*) begin
    if (((regslice_both_dout_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln114_reg_846_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln114_reg_846_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        dout_V_TDATA_blk_n = dout_V_TREADY_int_regslice;
    end else begin
        dout_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln114_reg_846_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        dout_V_TVALID_int_regslice = 1'b1;
    end else begin
        dout_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buf_0_M_imag_V_ce0 = 1'b1;
    end else begin
        filter_buf_0_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buf_0_M_imag_V_ce1 = 1'b1;
    end else begin
        filter_buf_0_M_imag_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        filter_buf_0_M_real_V_ce0 = 1'b1;
    end else begin
        filter_buf_0_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        filter_buf_0_M_real_V_ce1 = 1'b1;
    end else begin
        filter_buf_0_M_real_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buf_1_M_imag_V_ce0 = 1'b1;
    end else begin
        filter_buf_1_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buf_1_M_imag_V_ce1 = 1'b1;
    end else begin
        filter_buf_1_M_imag_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        filter_buf_1_M_real_V_ce0 = 1'b1;
    end else begin
        filter_buf_1_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        filter_buf_1_M_real_V_ce1 = 1'b1;
    end else begin
        filter_buf_1_M_real_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        twid_rom_conj_M_imag_V_ce0 = 1'b1;
    end else begin
        twid_rom_conj_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        twid_rom_conj_M_real_V_ce0 = 1'b1;
    end else begin
        twid_rom_conj_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln114_fu_235_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln114_fu_235_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((regslice_both_dout_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln114_fu_229_p2 = (ap_phi_mux_i_phi_fu_221_p4 + 11'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln114_reg_846_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (dout_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln114_reg_846_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (dout_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((icmp_ln114_reg_846_pp0_iter4_reg == 1'd0) & (dout_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((icmp_ln114_reg_846_pp0_iter3_reg == 1'd0) & (dout_V_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter5 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((icmp_ln114_reg_846_pp0_iter4_reg == 1'd0) & (dout_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((icmp_ln114_reg_846_pp0_iter3_reg == 1'd0) & (dout_V_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((icmp_ln114_reg_846_pp0_iter3_reg == 1'd0) & (dout_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((icmp_ln114_reg_846_pp0_iter3_reg == 1'd0) & (dout_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((icmp_ln114_reg_846_pp0_iter4_reg == 1'd0) & (dout_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter5 = ((icmp_ln114_reg_846_pp0_iter4_reg == 1'd0) & (dout_V_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dout_V_TDATA_int_regslice = ((icmp_ln118_reg_908_pp0_iter3_reg[0:0] == 1'b1) ? tmp_fu_653_p3 : tmp_1_fu_825_p3);

assign dout_V_TVALID = regslice_both_dout_V_U_vld_out;

assign f_M_imag_V_fu_773_p3 = ((tmp_11_fu_725_p3[0:0] == 1'b1) ? sub_ln1148_11_fu_767_p2 : sext_ln1148_5_fu_763_p1);

assign f_M_real_V_fu_713_p3 = ((tmp_10_fu_669_p3[0:0] == 1'b1) ? sub_ln1148_9_fu_707_p2 : sext_ln1148_3_fu_703_p1);

assign filter_buf_0_M_imag_V_address0 = zext_ln703_reg_866;

assign filter_buf_0_M_imag_V_address1 = zext_ln116_reg_850;

assign filter_buf_0_M_real_V_address0 = zext_ln703_fu_265_p1;

assign filter_buf_0_M_real_V_address1 = zext_ln116_fu_249_p1;

assign filter_buf_1_M_imag_V_address0 = zext_ln703_reg_866;

assign filter_buf_1_M_imag_V_address1 = zext_ln116_reg_850;

assign filter_buf_1_M_real_V_address0 = zext_ln703_fu_265_p1;

assign filter_buf_1_M_real_V_address1 = zext_ln116_fu_249_p1;

assign g_M_imag_V_fu_466_p3 = ((tmp_13_fu_418_p3[0:0] == 1'b1) ? sub_ln1148_15_fu_460_p2 : sext_ln1148_8_fu_456_p1);

assign g_M_real_V_fu_410_p3 = ((tmp_12_fu_366_p3[0:0] == 1'b1) ? trunc_ln1148_10_fu_380_p4 : sub_ln1148_13_fu_404_p2);

assign icmp_ln114_fu_235_p2 = ((ap_phi_mux_i_phi_fu_221_p4 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln116_fu_295_p2 = ((tmp_6_fu_285_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_309_p2 = ((i_reg_217 == 11'd0) ? 1'b1 : 1'b0);

assign lhs_V_fu_301_p3 = ((icmp_ln116_fu_295_p2[0:0] == 1'b1) ? filter_buf_0_M_real_V_q1 : filter_buf_1_M_real_V_q1);

assign p_r_M_imag_V_4_fu_819_p2 = (trunc_ln708_3_fu_809_p4 + f_M_imag_V_fu_773_p3);

assign p_r_M_real_V_4_fu_803_p2 = (p_r_V_fu_793_p4 + f_M_real_V_fu_713_p3);

assign p_r_V_fu_793_p4 = {{ret_V_12_fu_788_p2[62:31]}};

assign r_V_10_fu_500_p0 = sext_ln1115_fu_490_p1;

assign r_V_10_fu_500_p1 = sext_ln1118_fu_474_p1;

assign r_V_11_fu_506_p3 = {{twid_rom_conj_M_imag_V_load_reg_978}, {8'd0}};

assign r_V_12_fu_527_p1 = r_V_12_fu_527_p10;

assign r_V_12_fu_527_p10 = r_V_11_fu_506_p3;

assign r_V_13_fu_494_p0 = sext_ln1115_fu_490_p1;

assign r_V_14_fu_521_p0 = sext_ln1118_fu_474_p1;

assign r_V_14_fu_521_p1 = r_V_14_fu_521_p10;

assign r_V_14_fu_521_p10 = r_V_11_fu_506_p3;

assign r_V_fu_483_p3 = {{twid_rom_conj_M_real_V_load_reg_973}, {8'd0}};

assign ret_V_12_fu_788_p2 = ($signed(r_V_10_reg_988) - $signed(sext_ln1193_2_fu_785_p1));

assign ret_V_13_fu_781_p2 = (r_V_14_reg_993 + r_V_13_reg_983);

assign ret_V_14_fu_537_p2 = ($signed(sext_ln1193_reg_945_pp0_iter3_reg) + $signed(sext_ln1192_reg_938_pp0_iter3_reg));

assign ret_V_15_fu_533_p2 = ($signed(sext_ln1192_reg_938_pp0_iter3_reg) - $signed(sext_ln1193_reg_945_pp0_iter3_reg));

assign ret_V_16_fu_661_p2 = ($signed(sext_ln1193_1_reg_957_pp0_iter3_reg) + $signed(sext_ln1192_reg_938_pp0_iter3_reg));

assign ret_V_17_fu_721_p2 = ($signed(sext_ln1193_reg_945_pp0_iter3_reg) - $signed(sext_ln703_reg_952_pp0_iter3_reg));

assign ret_V_18_fu_350_p2 = ($signed(sext_ln1192_fu_329_p1) - $signed(sext_ln1193_1_fu_347_p1));

assign ret_V_fu_356_p2 = ($signed(sext_ln1193_fu_332_p1) + $signed(sext_ln703_fu_343_p1));

assign rhs_V_4_fu_315_p3 = ((tmp_9_reg_872[0:0] == 1'b1) ? filter_buf_1_M_real_V_q0 : filter_buf_0_M_real_V_q0);

assign rhs_V_fu_322_p3 = ((icmp_ln116_reg_888[0:0] == 1'b1) ? filter_buf_0_M_imag_V_q1 : filter_buf_1_M_imag_V_q1);

assign select_ln1148_1_fu_645_p3 = ((tmp_8_fu_597_p3[0:0] == 1'b1) ? sub_ln1148_3_fu_639_p2 : sext_ln1148_2_fu_635_p1);

assign select_ln1148_fu_589_p3 = ((tmp_7_fu_545_p3[0:0] == 1'b1) ? sub_ln1148_1_fu_583_p2 : sext_ln1148_fu_579_p1);

assign select_ln703_fu_336_p3 = ((tmp_9_reg_872_pp0_iter1_reg[0:0] == 1'b1) ? filter_buf_1_M_imag_V_q0 : filter_buf_0_M_imag_V_q0);

assign sext_ln1115_fu_490_p1 = $signed(r_V_fu_483_p3);

assign sext_ln1118_fu_474_p1 = $signed(g_M_real_V_reg_962);

assign sext_ln1148_1_fu_621_p1 = $signed(trunc_ln1148_4_fu_611_p4);

assign sext_ln1148_2_fu_635_p1 = $signed(trunc_ln1148_5_fu_625_p4);

assign sext_ln1148_3_fu_703_p1 = $signed(trunc_ln1148_7_fu_693_p4);

assign sext_ln1148_4_fu_749_p1 = $signed(trunc_ln1148_8_fu_739_p4);

assign sext_ln1148_5_fu_763_p1 = $signed(trunc_ln1148_9_fu_753_p4);

assign sext_ln1148_6_fu_400_p1 = $signed(trunc_ln1148_11_fu_390_p4);

assign sext_ln1148_7_fu_442_p1 = $signed(trunc_ln1148_12_fu_432_p4);

assign sext_ln1148_8_fu_456_p1 = $signed(trunc_ln1148_13_fu_446_p4);

assign sext_ln1148_fu_579_p1 = $signed(trunc_ln1148_s_fu_569_p4);

assign sext_ln1192_1_fu_541_p1 = ret_V_14_fu_537_p2;

assign sext_ln1192_2_fu_665_p1 = ret_V_16_fu_661_p2;

assign sext_ln1192_3_fu_362_p1 = ret_V_fu_356_p2;

assign sext_ln1192_fu_329_p1 = $signed(lhs_V_reg_893);

assign sext_ln1193_1_fu_347_p1 = $signed(rhs_V_4_reg_923);

assign sext_ln1193_2_fu_785_p1 = $signed(r_V_12_reg_998);

assign sext_ln1193_fu_332_p1 = $signed(rhs_V_fu_322_p3);

assign sext_ln703_fu_343_p1 = $signed(select_ln703_fu_336_p3);

assign sub_ln1148_10_fu_733_p2 = (32'd0 - ret_V_17_fu_721_p2);

assign sub_ln1148_11_fu_767_p2 = ($signed(32'd0) - $signed(sext_ln1148_4_fu_749_p1));

assign sub_ln1148_12_fu_374_p2 = ($signed(33'd0) - $signed(sext_ln1192_3_fu_362_p1));

assign sub_ln1148_13_fu_404_p2 = ($signed(32'd0) - $signed(sext_ln1148_6_fu_400_p1));

assign sub_ln1148_14_fu_426_p2 = (32'd0 - ret_V_18_fu_350_p2);

assign sub_ln1148_15_fu_460_p2 = ($signed(32'd0) - $signed(sext_ln1148_7_fu_442_p1));

assign sub_ln1148_1_fu_583_p2 = (32'd0 - trunc_ln1148_1_fu_559_p4);

assign sub_ln1148_2_fu_605_p2 = (32'd0 - ret_V_15_fu_533_p2);

assign sub_ln1148_3_fu_639_p2 = ($signed(32'd0) - $signed(sext_ln1148_1_fu_621_p1));

assign sub_ln1148_8_fu_677_p2 = ($signed(33'd0) - $signed(sext_ln1192_2_fu_665_p1));

assign sub_ln1148_9_fu_707_p2 = (32'd0 - trunc_ln1148_6_fu_683_p4);

assign sub_ln1148_fu_553_p2 = ($signed(33'd0) - $signed(sext_ln1192_1_fu_541_p1));

assign sub_ln703_fu_255_p2 = (10'd0 - trunc_ln114_fu_241_p1);

assign tmp_10_fu_669_p3 = ret_V_16_fu_661_p2[32'd31];

assign tmp_11_fu_725_p3 = ret_V_17_fu_721_p2[32'd31];

assign tmp_12_fu_366_p3 = ret_V_fu_356_p2[32'd31];

assign tmp_13_fu_418_p3 = ret_V_18_fu_350_p2[32'd31];

assign tmp_1_fu_825_p3 = {{p_r_M_imag_V_4_fu_819_p2}, {p_r_M_real_V_4_fu_803_p2}};

assign tmp_6_fu_285_p4 = {{i_reg_217[10:9]}};

assign tmp_7_fu_545_p3 = ret_V_14_fu_537_p2[32'd31];

assign tmp_8_fu_597_p3 = ret_V_15_fu_533_p2[32'd31];

assign tmp_fu_653_p3 = {{select_ln1148_1_fu_645_p3}, {select_ln1148_fu_589_p3}};

assign trunc_ln1148_10_fu_380_p4 = {{sub_ln1148_12_fu_374_p2[32:1]}};

assign trunc_ln1148_11_fu_390_p4 = {{ret_V_fu_356_p2[31:1]}};

assign trunc_ln1148_12_fu_432_p4 = {{sub_ln1148_14_fu_426_p2[31:1]}};

assign trunc_ln1148_13_fu_446_p4 = {{ret_V_18_fu_350_p2[31:1]}};

assign trunc_ln1148_1_fu_559_p4 = {{sub_ln1148_fu_553_p2[32:1]}};

assign trunc_ln1148_4_fu_611_p4 = {{sub_ln1148_2_fu_605_p2[31:1]}};

assign trunc_ln1148_5_fu_625_p4 = {{ret_V_15_fu_533_p2[31:1]}};

assign trunc_ln1148_6_fu_683_p4 = {{sub_ln1148_8_fu_677_p2[32:1]}};

assign trunc_ln1148_7_fu_693_p4 = {{ret_V_16_fu_661_p2[31:1]}};

assign trunc_ln1148_8_fu_739_p4 = {{sub_ln1148_10_fu_733_p2[31:1]}};

assign trunc_ln1148_9_fu_753_p4 = {{ret_V_17_fu_721_p2[31:1]}};

assign trunc_ln1148_s_fu_569_p4 = {{ret_V_14_fu_537_p2[31:1]}};

assign trunc_ln114_fu_241_p1 = ap_phi_mux_i_phi_fu_221_p4[9:0];

assign trunc_ln116_fu_245_p1 = ap_phi_mux_i_phi_fu_221_p4[8:0];

assign trunc_ln703_fu_261_p1 = sub_ln703_fu_255_p2[8:0];

assign trunc_ln708_3_fu_809_p4 = {{ret_V_13_fu_781_p2[62:31]}};

assign twid_rom_conj_M_imag_V_address0 = zext_ln114_fu_279_p1;

assign twid_rom_conj_M_real_V_address0 = zext_ln114_fu_279_p1;

assign zext_ln114_fu_279_p1 = i_reg_217;

assign zext_ln116_fu_249_p1 = trunc_ln116_fu_245_p1;

assign zext_ln703_fu_265_p1 = trunc_ln703_fu_261_p1;

always @ (posedge ap_clk) begin
    zext_ln116_reg_850[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln703_reg_866[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //hls_xfft2real_Loop_ifft_be_descramble_proc4
