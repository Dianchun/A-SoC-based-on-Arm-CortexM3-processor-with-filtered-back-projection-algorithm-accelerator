-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_xfft2real_Loop_ifft_be_descramble_proc4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dout_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    dout_V_TVALID : OUT STD_LOGIC;
    dout_V_TREADY : IN STD_LOGIC;
    filter_buf_0_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    filter_buf_0_M_imag_V_ce0 : OUT STD_LOGIC;
    filter_buf_0_M_imag_V_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
    filter_buf_0_M_imag_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    filter_buf_0_M_imag_V_ce1 : OUT STD_LOGIC;
    filter_buf_0_M_imag_V_q1 : IN STD_LOGIC_VECTOR (30 downto 0);
    filter_buf_1_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    filter_buf_1_M_imag_V_ce0 : OUT STD_LOGIC;
    filter_buf_1_M_imag_V_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
    filter_buf_1_M_imag_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    filter_buf_1_M_imag_V_ce1 : OUT STD_LOGIC;
    filter_buf_1_M_imag_V_q1 : IN STD_LOGIC_VECTOR (30 downto 0);
    filter_buf_0_M_real_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    filter_buf_0_M_real_V_ce0 : OUT STD_LOGIC;
    filter_buf_0_M_real_V_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
    filter_buf_0_M_real_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    filter_buf_0_M_real_V_ce1 : OUT STD_LOGIC;
    filter_buf_0_M_real_V_q1 : IN STD_LOGIC_VECTOR (30 downto 0);
    filter_buf_1_M_real_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    filter_buf_1_M_real_V_ce0 : OUT STD_LOGIC;
    filter_buf_1_M_real_V_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
    filter_buf_1_M_real_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    filter_buf_1_M_real_V_ce1 : OUT STD_LOGIC;
    filter_buf_1_M_real_V_q1 : IN STD_LOGIC_VECTOR (30 downto 0);
    twid_rom_conj_M_real_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    twid_rom_conj_M_real_V_ce0 : OUT STD_LOGIC;
    twid_rom_conj_M_real_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    twid_rom_conj_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    twid_rom_conj_M_imag_V_ce0 : OUT STD_LOGIC;
    twid_rom_conj_M_imag_V_q0 : IN STD_LOGIC_VECTOR (22 downto 0) );
end;


architecture behav of hls_xfft2real_Loop_ifft_be_descramble_proc4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dout_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln114_reg_846 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_846_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal icmp_ln114_reg_846_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_217 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln114_fu_229_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln114_reg_841 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln114_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_846_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_846_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln116_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln116_reg_850 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_reg_866 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_872 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_872_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_fu_301_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal lhs_V_reg_893 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln118_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_reg_908_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_reg_908_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_4_fu_315_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal rhs_V_4_reg_923 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1192_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_reg_938 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_reg_938_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1193_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1193_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1193_reg_945_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln703_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln703_reg_952 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln703_reg_952_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1193_1_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1193_1_reg_957 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1193_1_reg_957_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal g_M_real_V_fu_410_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_M_real_V_reg_962 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_M_imag_V_fu_466_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_M_imag_V_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal twid_rom_conj_M_real_V_load_reg_973 : STD_LOGIC_VECTOR (23 downto 0);
    signal twid_rom_conj_M_imag_V_load_reg_978 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_13_fu_494_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_13_reg_983 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_10_fu_500_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_10_reg_988 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_14_fu_521_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_14_reg_993 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_12_fu_527_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal r_V_12_reg_998 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_i_phi_fu_221_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln114_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln116_fu_245_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln114_fu_241_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln703_fu_255_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln703_fu_261_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_285_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal rhs_V_fu_322_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln703_fu_336_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_3_fu_362_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1148_12_fu_374_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln1148_11_fu_390_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1148_6_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_366_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1148_10_fu_380_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1148_13_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_18_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1148_14_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1148_12_fu_432_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1148_13_fu_446_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1148_7_fu_442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_418_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1148_15_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1148_8_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_483_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_13_fu_494_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1115_fu_490_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_10_fu_500_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_10_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1118_fu_474_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_11_fu_506_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_14_fu_521_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_14_fu_521_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_12_fu_527_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_14_fu_537_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_1_fu_541_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1148_fu_553_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln1148_s_fu_569_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1148_1_fu_559_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_545_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1148_1_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1148_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_15_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1148_2_fu_605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1148_4_fu_611_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1148_5_fu_625_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1148_1_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_597_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1148_3_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1148_2_fu_635_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1148_1_fu_645_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1148_fu_589_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_16_fu_661_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_2_fu_665_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1148_8_fu_677_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln1148_7_fu_693_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1148_6_fu_683_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_669_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1148_9_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1148_3_fu_703_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_17_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1148_10_fu_733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1148_8_fu_739_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1148_9_fu_753_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1148_4_fu_749_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_725_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1148_11_fu_767_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1148_5_fu_763_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1193_2_fu_785_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal ret_V_12_fu_788_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_r_V_fu_793_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_M_real_V_fu_713_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_13_fu_781_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln708_3_fu_809_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_M_imag_V_fu_773_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_V_4_fu_819_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_V_4_fu_803_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_653_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_825_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal regslice_both_dout_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal dout_V_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal dout_V_TVALID_int_regslice : STD_LOGIC;
    signal dout_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_dout_V_U_vld_out : STD_LOGIC;
    signal r_V_12_fu_527_p10 : STD_LOGIC_VECTOR (61 downto 0);
    signal r_V_14_fu_521_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component hls_xfft2real_mul_32s_32s_63_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component hls_xfft2real_mul_32s_31ns_63_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component hls_xfft2real_mul_32s_31ns_62_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component hls_xfft2real_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mul_32s_32s_63_1_1_U30 : component hls_xfft2real_mul_32s_32s_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => r_V_13_fu_494_p0,
        din1 => g_M_imag_V_reg_967,
        dout => r_V_13_fu_494_p2);

    mul_32s_32s_63_1_1_U31 : component hls_xfft2real_mul_32s_32s_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => r_V_10_fu_500_p0,
        din1 => r_V_10_fu_500_p1,
        dout => r_V_10_fu_500_p2);

    mul_32s_31ns_63_1_1_U32 : component hls_xfft2real_mul_32s_31ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 63)
    port map (
        din0 => r_V_14_fu_521_p0,
        din1 => r_V_14_fu_521_p1,
        dout => r_V_14_fu_521_p2);

    mul_32s_31ns_62_1_1_U33 : component hls_xfft2real_mul_32s_31ns_62_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 62)
    port map (
        din0 => g_M_imag_V_reg_967,
        din1 => r_V_12_fu_527_p1,
        dout => r_V_12_fu_527_p2);

    regslice_both_dout_V_U : component hls_xfft2real_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => dout_V_TDATA_int_regslice,
        vld_in => dout_V_TVALID_int_regslice,
        ack_in => dout_V_TREADY_int_regslice,
        data_out => dout_V_TDATA,
        vld_out => regslice_both_dout_V_U_vld_out,
        ack_out => dout_V_TREADY,
        apdone_blk => regslice_both_dout_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((regslice_both_dout_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_217 <= ap_const_lv11_0;
            elsif (((icmp_ln114_reg_846 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_217 <= add_ln114_reg_841;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln114_reg_841 <= add_ln114_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln118_reg_908 = ap_const_lv1_0) and (icmp_ln114_reg_846_pp0_iter1_reg = ap_const_lv1_0))) then
                g_M_imag_V_reg_967 <= g_M_imag_V_fu_466_p3;
                g_M_real_V_reg_962 <= g_M_real_V_fu_410_p3;
                sext_ln1193_1_reg_957 <= sext_ln1193_1_fu_347_p1;
                sext_ln703_reg_952 <= sext_ln703_fu_343_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln114_reg_846 <= icmp_ln114_fu_235_p2;
                icmp_ln114_reg_846_pp0_iter1_reg <= icmp_ln114_reg_846;
                tmp_9_reg_872_pp0_iter1_reg <= tmp_9_reg_872;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln114_reg_846_pp0_iter2_reg <= icmp_ln114_reg_846_pp0_iter1_reg;
                icmp_ln114_reg_846_pp0_iter3_reg <= icmp_ln114_reg_846_pp0_iter2_reg;
                icmp_ln114_reg_846_pp0_iter4_reg <= icmp_ln114_reg_846_pp0_iter3_reg;
                icmp_ln118_reg_908_pp0_iter2_reg <= icmp_ln118_reg_908;
                icmp_ln118_reg_908_pp0_iter3_reg <= icmp_ln118_reg_908_pp0_iter2_reg;
                sext_ln1192_reg_938_pp0_iter3_reg <= sext_ln1192_reg_938;
                sext_ln1193_1_reg_957_pp0_iter3_reg <= sext_ln1193_1_reg_957;
                sext_ln1193_reg_945_pp0_iter3_reg <= sext_ln1193_reg_945;
                sext_ln703_reg_952_pp0_iter3_reg <= sext_ln703_reg_952;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_reg_846 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln116_reg_888 <= icmp_ln116_fu_295_p2;
                icmp_ln118_reg_908 <= icmp_ln118_fu_309_p2;
                lhs_V_reg_893 <= lhs_V_fu_301_p3;
                rhs_V_4_reg_923 <= rhs_V_4_fu_315_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln118_reg_908_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln114_reg_846_pp0_iter2_reg = ap_const_lv1_0))) then
                r_V_10_reg_988 <= r_V_10_fu_500_p2;
                r_V_12_reg_998 <= r_V_12_fu_527_p2;
                r_V_13_reg_983 <= r_V_13_fu_494_p2;
                r_V_14_reg_993 <= r_V_14_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln114_reg_846_pp0_iter1_reg = ap_const_lv1_0))) then
                sext_ln1192_reg_938 <= sext_ln1192_fu_329_p1;
                sext_ln1193_reg_945 <= sext_ln1193_fu_332_p1;
                twid_rom_conj_M_imag_V_load_reg_978 <= twid_rom_conj_M_imag_V_q0;
                twid_rom_conj_M_real_V_load_reg_973 <= twid_rom_conj_M_real_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln114_fu_235_p2 = ap_const_lv1_0))) then
                tmp_9_reg_872 <= sub_ln703_fu_255_p2(9 downto 9);
                    zext_ln116_reg_850(8 downto 0) <= zext_ln116_fu_249_p1(8 downto 0);
                    zext_ln703_reg_866(8 downto 0) <= zext_ln703_fu_265_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln116_reg_850(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln703_reg_866(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter0, icmp_ln114_fu_235_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, regslice_both_dout_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln114_fu_235_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln114_fu_235_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                if (((regslice_both_dout_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln114_fu_229_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_221_p4) + unsigned(ap_const_lv11_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln114_reg_846_pp0_iter3_reg, ap_enable_reg_pp0_iter5, icmp_ln114_reg_846_pp0_iter4_reg, dout_V_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln114_reg_846_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (dout_V_TREADY_int_regslice = ap_const_logic_0)) or ((icmp_ln114_reg_846_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (dout_V_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln114_reg_846_pp0_iter3_reg, ap_enable_reg_pp0_iter5, icmp_ln114_reg_846_pp0_iter4_reg, ap_block_state6_io, ap_block_state7_io, dout_V_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state7_io) or ((icmp_ln114_reg_846_pp0_iter4_reg = ap_const_lv1_0) and (dout_V_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or ((icmp_ln114_reg_846_pp0_iter3_reg = ap_const_lv1_0) and (dout_V_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln114_reg_846_pp0_iter3_reg, ap_enable_reg_pp0_iter5, icmp_ln114_reg_846_pp0_iter4_reg, ap_block_state6_io, ap_block_state7_io, dout_V_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state7_io) or ((icmp_ln114_reg_846_pp0_iter4_reg = ap_const_lv1_0) and (dout_V_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or ((icmp_ln114_reg_846_pp0_iter3_reg = ap_const_lv1_0) and (dout_V_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(icmp_ln114_reg_846_pp0_iter3_reg, dout_V_TREADY_int_regslice)
    begin
                ap_block_state6_io <= ((icmp_ln114_reg_846_pp0_iter3_reg = ap_const_lv1_0) and (dout_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state6_pp0_stage0_iter4_assign_proc : process(icmp_ln114_reg_846_pp0_iter3_reg, dout_V_TREADY_int_regslice)
    begin
                ap_block_state6_pp0_stage0_iter4 <= ((icmp_ln114_reg_846_pp0_iter3_reg = ap_const_lv1_0) and (dout_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state7_io_assign_proc : process(icmp_ln114_reg_846_pp0_iter4_reg, dout_V_TREADY_int_regslice)
    begin
                ap_block_state7_io <= ((icmp_ln114_reg_846_pp0_iter4_reg = ap_const_lv1_0) and (dout_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state7_pp0_stage0_iter5_assign_proc : process(icmp_ln114_reg_846_pp0_iter4_reg, dout_V_TREADY_int_regslice)
    begin
                ap_block_state7_pp0_stage0_iter5 <= ((icmp_ln114_reg_846_pp0_iter4_reg = ap_const_lv1_0) and (dout_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln114_fu_235_p2)
    begin
        if ((icmp_ln114_fu_235_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8, regslice_both_dout_V_U_apdone_blk)
    begin
        if (((regslice_both_dout_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_221_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln114_reg_846, i_reg_217, add_ln114_reg_841, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln114_reg_846 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_221_p4 <= add_ln114_reg_841;
        else 
            ap_phi_mux_i_phi_fu_221_p4 <= i_reg_217;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, regslice_both_dout_V_U_apdone_blk)
    begin
        if (((regslice_both_dout_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dout_V_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, icmp_ln114_reg_846_pp0_iter3_reg, ap_enable_reg_pp0_iter5, icmp_ln114_reg_846_pp0_iter4_reg, dout_V_TREADY_int_regslice)
    begin
        if ((((icmp_ln114_reg_846_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln114_reg_846_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            dout_V_TDATA_blk_n <= dout_V_TREADY_int_regslice;
        else 
            dout_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_V_TDATA_int_regslice <= 
        tmp_fu_653_p3 when (icmp_ln118_reg_908_pp0_iter3_reg(0) = '1') else 
        tmp_1_fu_825_p3;
    dout_V_TVALID <= regslice_both_dout_V_U_vld_out;

    dout_V_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln114_reg_846_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln114_reg_846_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            dout_V_TVALID_int_regslice <= ap_const_logic_1;
        else 
            dout_V_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    f_M_imag_V_fu_773_p3 <= 
        sub_ln1148_11_fu_767_p2 when (tmp_11_fu_725_p3(0) = '1') else 
        sext_ln1148_5_fu_763_p1;
    f_M_real_V_fu_713_p3 <= 
        sub_ln1148_9_fu_707_p2 when (tmp_10_fu_669_p3(0) = '1') else 
        sext_ln1148_3_fu_703_p1;
    filter_buf_0_M_imag_V_address0 <= zext_ln703_reg_866(9 - 1 downto 0);
    filter_buf_0_M_imag_V_address1 <= zext_ln116_reg_850(9 - 1 downto 0);

    filter_buf_0_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filter_buf_0_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            filter_buf_0_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filter_buf_0_M_imag_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filter_buf_0_M_imag_V_ce1 <= ap_const_logic_1;
        else 
            filter_buf_0_M_imag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    filter_buf_0_M_real_V_address0 <= zext_ln703_fu_265_p1(9 - 1 downto 0);
    filter_buf_0_M_real_V_address1 <= zext_ln116_fu_249_p1(9 - 1 downto 0);

    filter_buf_0_M_real_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            filter_buf_0_M_real_V_ce0 <= ap_const_logic_1;
        else 
            filter_buf_0_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filter_buf_0_M_real_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            filter_buf_0_M_real_V_ce1 <= ap_const_logic_1;
        else 
            filter_buf_0_M_real_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    filter_buf_1_M_imag_V_address0 <= zext_ln703_reg_866(9 - 1 downto 0);
    filter_buf_1_M_imag_V_address1 <= zext_ln116_reg_850(9 - 1 downto 0);

    filter_buf_1_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filter_buf_1_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            filter_buf_1_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filter_buf_1_M_imag_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filter_buf_1_M_imag_V_ce1 <= ap_const_logic_1;
        else 
            filter_buf_1_M_imag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    filter_buf_1_M_real_V_address0 <= zext_ln703_fu_265_p1(9 - 1 downto 0);
    filter_buf_1_M_real_V_address1 <= zext_ln116_fu_249_p1(9 - 1 downto 0);

    filter_buf_1_M_real_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            filter_buf_1_M_real_V_ce0 <= ap_const_logic_1;
        else 
            filter_buf_1_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filter_buf_1_M_real_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            filter_buf_1_M_real_V_ce1 <= ap_const_logic_1;
        else 
            filter_buf_1_M_real_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    g_M_imag_V_fu_466_p3 <= 
        sub_ln1148_15_fu_460_p2 when (tmp_13_fu_418_p3(0) = '1') else 
        sext_ln1148_8_fu_456_p1;
    g_M_real_V_fu_410_p3 <= 
        trunc_ln1148_10_fu_380_p4 when (tmp_12_fu_366_p3(0) = '1') else 
        sub_ln1148_13_fu_404_p2;
    icmp_ln114_fu_235_p2 <= "1" when (ap_phi_mux_i_phi_fu_221_p4 = ap_const_lv11_400) else "0";
    icmp_ln116_fu_295_p2 <= "1" when (tmp_6_fu_285_p4 = ap_const_lv2_0) else "0";
    icmp_ln118_fu_309_p2 <= "1" when (i_reg_217 = ap_const_lv11_0) else "0";
    lhs_V_fu_301_p3 <= 
        filter_buf_0_M_real_V_q1 when (icmp_ln116_fu_295_p2(0) = '1') else 
        filter_buf_1_M_real_V_q1;
    p_r_M_imag_V_4_fu_819_p2 <= std_logic_vector(unsigned(trunc_ln708_3_fu_809_p4) + unsigned(f_M_imag_V_fu_773_p3));
    p_r_M_real_V_4_fu_803_p2 <= std_logic_vector(unsigned(p_r_V_fu_793_p4) + unsigned(f_M_real_V_fu_713_p3));
    p_r_V_fu_793_p4 <= ret_V_12_fu_788_p2(62 downto 31);
    r_V_10_fu_500_p0 <= sext_ln1115_fu_490_p1(32 - 1 downto 0);
    r_V_10_fu_500_p1 <= sext_ln1118_fu_474_p1(32 - 1 downto 0);
    r_V_11_fu_506_p3 <= (twid_rom_conj_M_imag_V_load_reg_978 & ap_const_lv8_0);
    r_V_12_fu_527_p1 <= r_V_12_fu_527_p10(31 - 1 downto 0);
    r_V_12_fu_527_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_11_fu_506_p3),62));
    r_V_13_fu_494_p0 <= sext_ln1115_fu_490_p1(32 - 1 downto 0);
    r_V_14_fu_521_p0 <= sext_ln1118_fu_474_p1(32 - 1 downto 0);
    r_V_14_fu_521_p1 <= r_V_14_fu_521_p10(31 - 1 downto 0);
    r_V_14_fu_521_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_11_fu_506_p3),63));
    r_V_fu_483_p3 <= (twid_rom_conj_M_real_V_load_reg_973 & ap_const_lv8_0);
    ret_V_12_fu_788_p2 <= std_logic_vector(unsigned(r_V_10_reg_988) - unsigned(sext_ln1193_2_fu_785_p1));
    ret_V_13_fu_781_p2 <= std_logic_vector(unsigned(r_V_14_reg_993) + unsigned(r_V_13_reg_983));
    ret_V_14_fu_537_p2 <= std_logic_vector(signed(sext_ln1193_reg_945_pp0_iter3_reg) + signed(sext_ln1192_reg_938_pp0_iter3_reg));
    ret_V_15_fu_533_p2 <= std_logic_vector(signed(sext_ln1192_reg_938_pp0_iter3_reg) - signed(sext_ln1193_reg_945_pp0_iter3_reg));
    ret_V_16_fu_661_p2 <= std_logic_vector(signed(sext_ln1193_1_reg_957_pp0_iter3_reg) + signed(sext_ln1192_reg_938_pp0_iter3_reg));
    ret_V_17_fu_721_p2 <= std_logic_vector(signed(sext_ln1193_reg_945_pp0_iter3_reg) - signed(sext_ln703_reg_952_pp0_iter3_reg));
    ret_V_18_fu_350_p2 <= std_logic_vector(signed(sext_ln1192_fu_329_p1) - signed(sext_ln1193_1_fu_347_p1));
    ret_V_fu_356_p2 <= std_logic_vector(signed(sext_ln1193_fu_332_p1) + signed(sext_ln703_fu_343_p1));
    rhs_V_4_fu_315_p3 <= 
        filter_buf_1_M_real_V_q0 when (tmp_9_reg_872(0) = '1') else 
        filter_buf_0_M_real_V_q0;
    rhs_V_fu_322_p3 <= 
        filter_buf_0_M_imag_V_q1 when (icmp_ln116_reg_888(0) = '1') else 
        filter_buf_1_M_imag_V_q1;
    select_ln1148_1_fu_645_p3 <= 
        sub_ln1148_3_fu_639_p2 when (tmp_8_fu_597_p3(0) = '1') else 
        sext_ln1148_2_fu_635_p1;
    select_ln1148_fu_589_p3 <= 
        sub_ln1148_1_fu_583_p2 when (tmp_7_fu_545_p3(0) = '1') else 
        sext_ln1148_fu_579_p1;
    select_ln703_fu_336_p3 <= 
        filter_buf_1_M_imag_V_q0 when (tmp_9_reg_872_pp0_iter1_reg(0) = '1') else 
        filter_buf_0_M_imag_V_q0;
        sext_ln1115_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_483_p3),63));

        sext_ln1118_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(g_M_real_V_reg_962),63));

        sext_ln1148_1_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1148_4_fu_611_p4),32));

        sext_ln1148_2_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1148_5_fu_625_p4),32));

        sext_ln1148_3_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1148_7_fu_693_p4),32));

        sext_ln1148_4_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1148_8_fu_739_p4),32));

        sext_ln1148_5_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1148_9_fu_753_p4),32));

        sext_ln1148_6_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1148_11_fu_390_p4),32));

        sext_ln1148_7_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1148_12_fu_432_p4),32));

        sext_ln1148_8_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1148_13_fu_446_p4),32));

        sext_ln1148_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1148_s_fu_569_p4),32));

        sext_ln1192_1_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_14_fu_537_p2),33));

        sext_ln1192_2_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_16_fu_661_p2),33));

        sext_ln1192_3_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_356_p2),33));

        sext_ln1192_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_reg_893),32));

        sext_ln1193_1_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_4_reg_923),32));

        sext_ln1193_2_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_12_reg_998),63));

        sext_ln1193_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_322_p3),32));

        sext_ln703_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln703_fu_336_p3),32));

    sub_ln1148_10_fu_733_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(ret_V_17_fu_721_p2));
    sub_ln1148_11_fu_767_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sext_ln1148_4_fu_749_p1));
    sub_ln1148_12_fu_374_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(sext_ln1192_3_fu_362_p1));
    sub_ln1148_13_fu_404_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sext_ln1148_6_fu_400_p1));
    sub_ln1148_14_fu_426_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(ret_V_18_fu_350_p2));
    sub_ln1148_15_fu_460_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sext_ln1148_7_fu_442_p1));
    sub_ln1148_1_fu_583_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(trunc_ln1148_1_fu_559_p4));
    sub_ln1148_2_fu_605_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(ret_V_15_fu_533_p2));
    sub_ln1148_3_fu_639_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sext_ln1148_1_fu_621_p1));
    sub_ln1148_8_fu_677_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(sext_ln1192_2_fu_665_p1));
    sub_ln1148_9_fu_707_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(trunc_ln1148_6_fu_683_p4));
    sub_ln1148_fu_553_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(sext_ln1192_1_fu_541_p1));
    sub_ln703_fu_255_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(trunc_ln114_fu_241_p1));
    tmp_10_fu_669_p3 <= ret_V_16_fu_661_p2(31 downto 31);
    tmp_11_fu_725_p3 <= ret_V_17_fu_721_p2(31 downto 31);
    tmp_12_fu_366_p3 <= ret_V_fu_356_p2(31 downto 31);
    tmp_13_fu_418_p3 <= ret_V_18_fu_350_p2(31 downto 31);
    tmp_1_fu_825_p3 <= (p_r_M_imag_V_4_fu_819_p2 & p_r_M_real_V_4_fu_803_p2);
    tmp_6_fu_285_p4 <= i_reg_217(10 downto 9);
    tmp_7_fu_545_p3 <= ret_V_14_fu_537_p2(31 downto 31);
    tmp_8_fu_597_p3 <= ret_V_15_fu_533_p2(31 downto 31);
    tmp_fu_653_p3 <= (select_ln1148_1_fu_645_p3 & select_ln1148_fu_589_p3);
    trunc_ln1148_10_fu_380_p4 <= sub_ln1148_12_fu_374_p2(32 downto 1);
    trunc_ln1148_11_fu_390_p4 <= ret_V_fu_356_p2(31 downto 1);
    trunc_ln1148_12_fu_432_p4 <= sub_ln1148_14_fu_426_p2(31 downto 1);
    trunc_ln1148_13_fu_446_p4 <= ret_V_18_fu_350_p2(31 downto 1);
    trunc_ln1148_1_fu_559_p4 <= sub_ln1148_fu_553_p2(32 downto 1);
    trunc_ln1148_4_fu_611_p4 <= sub_ln1148_2_fu_605_p2(31 downto 1);
    trunc_ln1148_5_fu_625_p4 <= ret_V_15_fu_533_p2(31 downto 1);
    trunc_ln1148_6_fu_683_p4 <= sub_ln1148_8_fu_677_p2(32 downto 1);
    trunc_ln1148_7_fu_693_p4 <= ret_V_16_fu_661_p2(31 downto 1);
    trunc_ln1148_8_fu_739_p4 <= sub_ln1148_10_fu_733_p2(31 downto 1);
    trunc_ln1148_9_fu_753_p4 <= ret_V_17_fu_721_p2(31 downto 1);
    trunc_ln1148_s_fu_569_p4 <= ret_V_14_fu_537_p2(31 downto 1);
    trunc_ln114_fu_241_p1 <= ap_phi_mux_i_phi_fu_221_p4(10 - 1 downto 0);
    trunc_ln116_fu_245_p1 <= ap_phi_mux_i_phi_fu_221_p4(9 - 1 downto 0);
    trunc_ln703_fu_261_p1 <= sub_ln703_fu_255_p2(9 - 1 downto 0);
    trunc_ln708_3_fu_809_p4 <= ret_V_13_fu_781_p2(62 downto 31);
    twid_rom_conj_M_imag_V_address0 <= zext_ln114_fu_279_p1(10 - 1 downto 0);

    twid_rom_conj_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            twid_rom_conj_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            twid_rom_conj_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    twid_rom_conj_M_real_V_address0 <= zext_ln114_fu_279_p1(10 - 1 downto 0);

    twid_rom_conj_M_real_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            twid_rom_conj_M_real_V_ce0 <= ap_const_logic_1;
        else 
            twid_rom_conj_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln114_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_217),64));
    zext_ln116_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln116_fu_245_p1),64));
    zext_ln703_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln703_fu_261_p1),64));
end behav;
