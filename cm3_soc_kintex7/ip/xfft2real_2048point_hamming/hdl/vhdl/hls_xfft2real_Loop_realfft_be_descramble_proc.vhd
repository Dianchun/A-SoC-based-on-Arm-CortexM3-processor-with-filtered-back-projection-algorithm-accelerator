-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_xfft2real_Loop_realfft_be_descramble_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    filter_buf_0_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    filter_buf_0_M_imag_V_ce0 : OUT STD_LOGIC;
    filter_buf_0_M_imag_V_we0 : OUT STD_LOGIC;
    filter_buf_0_M_imag_V_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    filter_buf_1_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    filter_buf_1_M_imag_V_ce0 : OUT STD_LOGIC;
    filter_buf_1_M_imag_V_we0 : OUT STD_LOGIC;
    filter_buf_1_M_imag_V_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    filter_buf_0_M_real_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    filter_buf_0_M_real_V_ce0 : OUT STD_LOGIC;
    filter_buf_0_M_real_V_we0 : OUT STD_LOGIC;
    filter_buf_0_M_real_V_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    filter_buf_1_M_real_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    filter_buf_1_M_real_V_ce0 : OUT STD_LOGIC;
    filter_buf_1_M_real_V_we0 : OUT STD_LOGIC;
    filter_buf_1_M_real_V_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    descramble_buf_0_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    descramble_buf_0_M_imag_V_ce0 : OUT STD_LOGIC;
    descramble_buf_0_M_imag_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    descramble_buf_0_M_imag_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    descramble_buf_0_M_imag_V_ce1 : OUT STD_LOGIC;
    descramble_buf_0_M_imag_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    descramble_buf_1_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    descramble_buf_1_M_imag_V_ce0 : OUT STD_LOGIC;
    descramble_buf_1_M_imag_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    descramble_buf_1_M_imag_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    descramble_buf_1_M_imag_V_ce1 : OUT STD_LOGIC;
    descramble_buf_1_M_imag_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    descramble_buf_0_M_real_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    descramble_buf_0_M_real_V_ce0 : OUT STD_LOGIC;
    descramble_buf_0_M_real_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    descramble_buf_0_M_real_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    descramble_buf_0_M_real_V_ce1 : OUT STD_LOGIC;
    descramble_buf_0_M_real_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    descramble_buf_1_M_real_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    descramble_buf_1_M_real_V_ce0 : OUT STD_LOGIC;
    descramble_buf_1_M_real_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    descramble_buf_1_M_real_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    descramble_buf_1_M_real_V_ce1 : OUT STD_LOGIC;
    descramble_buf_1_M_real_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    twid_rom_M_real_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    twid_rom_M_real_V_ce0 : OUT STD_LOGIC;
    twid_rom_M_real_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    twid_rom_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    twid_rom_M_imag_V_ce0 : OUT STD_LOGIC;
    twid_rom_M_imag_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of hls_xfft2real_Loop_realfft_be_descramble_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal filter_rom_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal filter_rom_i_ce0 : STD_LOGIC;
    signal filter_rom_i_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_reg_271 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln92_fu_283_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln92_reg_784 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln92_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_789 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln94_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_reg_793 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_reg_813 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_819_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_835 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_835_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_835_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_835_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_835_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_fu_356_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_reg_840 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_reg_840_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_reg_840_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln97_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_857 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_857_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_857_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_370_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_buf_0_M_real_V_addr_reg_893 : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_0_M_real_V_addr_reg_893_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_0_M_real_V_addr_reg_893_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_0_M_real_V_addr_reg_893_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_0_M_real_V_addr_reg_893_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_1_M_real_V_addr_reg_898 : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_1_M_real_V_addr_reg_898_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_1_M_real_V_addr_reg_898_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_1_M_real_V_addr_reg_898_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_1_M_real_V_addr_reg_898_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_0_M_imag_V_addr_reg_903 : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_0_M_imag_V_addr_reg_903_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_0_M_imag_V_addr_reg_903_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_0_M_imag_V_addr_reg_903_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_0_M_imag_V_addr_reg_903_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_1_M_imag_V_addr_reg_908 : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_1_M_imag_V_addr_reg_908_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_1_M_imag_V_addr_reg_908_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_1_M_imag_V_addr_reg_908_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_buf_1_M_imag_V_addr_reg_908_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_4_fu_377_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_4_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_4_reg_913_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln703_fu_397_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_reg_919 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_reg_919_pp0_iter3_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_1_fu_400_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_1_reg_924 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_1_reg_924_pp0_iter3_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_2_fu_409_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_2_reg_929 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_2_reg_929_pp0_iter3_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_3_fu_413_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_3_reg_934 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln703_3_reg_934_pp0_iter3_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_4_reg_939 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1148_7_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1148_5_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1148_5_reg_949 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_M_imag_V_fu_503_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_M_imag_V_reg_954 : STD_LOGIC_VECTOR (31 downto 0);
    signal twid_rom_M_real_V_load_reg_959 : STD_LOGIC_VECTOR (23 downto 0);
    signal twid_rom_M_imag_V_load_reg_964 : STD_LOGIC_VECTOR (23 downto 0);
    signal filter_rom_i_load_reg_969 : STD_LOGIC_VECTOR (21 downto 0);
    signal filter_rom_i_load_reg_969_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal filter_rom_i_load_reg_969_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_4_fu_534_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_4_reg_974 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_1_fu_540_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_1_reg_979 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_5_fu_557_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_5_reg_984 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_3_fu_563_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_3_reg_989 : STD_LOGIC_VECTOR (62 downto 0);
    signal cdata_M_imag_V_3_fu_721_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cdata_M_imag_V_3_reg_994 : STD_LOGIC_VECTOR (31 downto 0);
    signal cdata_M_real_V_3_fu_728_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cdata_M_real_V_3_reg_999 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_V_2_reg_1004 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_r_M_imag_V_3_reg_1010 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_phi_mux_i_phi_fu_275_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln92_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln94_fu_299_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln92_fu_295_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln703_fu_309_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln703_fu_315_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_340_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln703_fu_384_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_3_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_417_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1148_4_fu_431_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln1148_8_fu_447_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_7_fu_403_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1148_6_fu_471_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln1148_s_fu_477_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_463_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1148_7_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1148_3_fu_487_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_M_real_V_fu_511_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_523_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_4_fu_534_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1115_fu_530_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_4_fu_534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1118_1_fu_520_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_1_fu_540_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1118_fu_516_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_2_fu_546_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_fu_557_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1115_1_fu_553_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_5_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_fu_563_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_5_fu_577_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1148_fu_589_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln1148_1_fu_595_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_581_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1148_1_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1148_2_fu_605_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_6_fu_629_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1148_2_fu_641_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln1148_4_fu_647_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_633_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1148_3_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1148_5_fu_657_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_3_fu_685_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_r_V_fu_689_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_M_real_V_fu_621_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_4_fu_681_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln4_fu_705_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_M_imag_V_fu_673_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cdata_M_imag_V_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_V_fu_715_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cdata_M_real_V_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_V_fu_699_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_741_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_9_fu_752_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln1118_fu_748_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal r_V_7_fu_758_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_7_fu_758_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal r_V_9_fu_752_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hls_xfft2real_mul_32s_32s_63_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component hls_xfft2real_mul_32s_30ns_62_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component hls_xfft2real_Loop_realfft_be_descramble_proc_filter_rom_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    filter_rom_i_U : component hls_xfft2real_Loop_realfft_be_descramble_proc_filter_rom_i
    generic map (
        DataWidth => 22,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => filter_rom_i_address0,
        ce0 => filter_rom_i_ce0,
        q0 => filter_rom_i_q0);

    mul_32s_32s_63_1_1_U11 : component hls_xfft2real_mul_32s_32s_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => r_V_4_fu_534_p0,
        din1 => r_V_4_fu_534_p1,
        dout => r_V_4_fu_534_p2);

    mul_32s_32s_63_1_1_U12 : component hls_xfft2real_mul_32s_32s_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => r_V_1_fu_540_p0,
        din1 => r_V_1_fu_540_p1,
        dout => r_V_1_fu_540_p2);

    mul_32s_32s_63_1_1_U13 : component hls_xfft2real_mul_32s_32s_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => r_V_5_fu_557_p0,
        din1 => r_V_5_fu_557_p1,
        dout => r_V_5_fu_557_p2);

    mul_32s_32s_63_1_1_U14 : component hls_xfft2real_mul_32s_32s_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => r_V_3_fu_563_p0,
        din1 => r_V_3_fu_563_p1,
        dout => r_V_3_fu_563_p2);

    mul_32s_30ns_62_1_1_U15 : component hls_xfft2real_mul_32s_30ns_62_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 30,
        dout_WIDTH => 62)
    port map (
        din0 => cdata_M_imag_V_3_reg_994,
        din1 => r_V_9_fu_752_p1,
        dout => r_V_9_fu_752_p2);

    mul_32s_30ns_62_1_1_U16 : component hls_xfft2real_mul_32s_30ns_62_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 30,
        dout_WIDTH => 62)
    port map (
        din0 => cdata_M_real_V_3_reg_999,
        din1 => r_V_7_fu_758_p1,
        dout => r_V_7_fu_758_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_271 <= ap_const_lv11_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln92_reg_789 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_271 <= add_ln92_reg_784;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln92_reg_784 <= add_ln92_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                cdata_M_imag_V_3_reg_994 <= cdata_M_imag_V_3_fu_721_p3;
                cdata_M_real_V_3_reg_999 <= cdata_M_real_V_3_fu_728_p3;
                filter_buf_0_M_imag_V_addr_reg_903_pp0_iter2_reg <= filter_buf_0_M_imag_V_addr_reg_903;
                filter_buf_0_M_imag_V_addr_reg_903_pp0_iter3_reg <= filter_buf_0_M_imag_V_addr_reg_903_pp0_iter2_reg;
                filter_buf_0_M_imag_V_addr_reg_903_pp0_iter4_reg <= filter_buf_0_M_imag_V_addr_reg_903_pp0_iter3_reg;
                filter_buf_0_M_imag_V_addr_reg_903_pp0_iter5_reg <= filter_buf_0_M_imag_V_addr_reg_903_pp0_iter4_reg;
                filter_buf_0_M_real_V_addr_reg_893_pp0_iter2_reg <= filter_buf_0_M_real_V_addr_reg_893;
                filter_buf_0_M_real_V_addr_reg_893_pp0_iter3_reg <= filter_buf_0_M_real_V_addr_reg_893_pp0_iter2_reg;
                filter_buf_0_M_real_V_addr_reg_893_pp0_iter4_reg <= filter_buf_0_M_real_V_addr_reg_893_pp0_iter3_reg;
                filter_buf_0_M_real_V_addr_reg_893_pp0_iter5_reg <= filter_buf_0_M_real_V_addr_reg_893_pp0_iter4_reg;
                filter_buf_1_M_imag_V_addr_reg_908_pp0_iter2_reg <= filter_buf_1_M_imag_V_addr_reg_908;
                filter_buf_1_M_imag_V_addr_reg_908_pp0_iter3_reg <= filter_buf_1_M_imag_V_addr_reg_908_pp0_iter2_reg;
                filter_buf_1_M_imag_V_addr_reg_908_pp0_iter4_reg <= filter_buf_1_M_imag_V_addr_reg_908_pp0_iter3_reg;
                filter_buf_1_M_imag_V_addr_reg_908_pp0_iter5_reg <= filter_buf_1_M_imag_V_addr_reg_908_pp0_iter4_reg;
                filter_buf_1_M_real_V_addr_reg_898_pp0_iter2_reg <= filter_buf_1_M_real_V_addr_reg_898;
                filter_buf_1_M_real_V_addr_reg_898_pp0_iter3_reg <= filter_buf_1_M_real_V_addr_reg_898_pp0_iter2_reg;
                filter_buf_1_M_real_V_addr_reg_898_pp0_iter4_reg <= filter_buf_1_M_real_V_addr_reg_898_pp0_iter3_reg;
                filter_buf_1_M_real_V_addr_reg_898_pp0_iter5_reg <= filter_buf_1_M_real_V_addr_reg_898_pp0_iter4_reg;
                filter_rom_i_load_reg_969 <= filter_rom_i_q0;
                filter_rom_i_load_reg_969_pp0_iter3_reg <= filter_rom_i_load_reg_969;
                filter_rom_i_load_reg_969_pp0_iter4_reg <= filter_rom_i_load_reg_969_pp0_iter3_reg;
                g_M_imag_V_reg_954 <= g_M_imag_V_fu_503_p3;
                icmp_ln94_reg_835_pp0_iter2_reg <= icmp_ln94_reg_835;
                icmp_ln94_reg_835_pp0_iter3_reg <= icmp_ln94_reg_835_pp0_iter2_reg;
                icmp_ln94_reg_835_pp0_iter4_reg <= icmp_ln94_reg_835_pp0_iter3_reg;
                icmp_ln94_reg_835_pp0_iter5_reg <= icmp_ln94_reg_835_pp0_iter4_reg;
                icmp_ln97_reg_857_pp0_iter2_reg <= icmp_ln97_reg_857;
                icmp_ln97_reg_857_pp0_iter3_reg <= icmp_ln97_reg_857_pp0_iter2_reg;
                lhs_V_4_reg_913 <= lhs_V_4_fu_377_p3;
                lhs_V_4_reg_913_pp0_iter3_reg <= lhs_V_4_reg_913;
                lhs_V_reg_840_pp0_iter2_reg <= lhs_V_reg_840;
                lhs_V_reg_840_pp0_iter3_reg <= lhs_V_reg_840_pp0_iter2_reg;
                p_r_M_imag_V_3_reg_1010 <= r_V_9_fu_752_p2(61 downto 31);
                p_r_V_2_reg_1004 <= r_V_7_fu_758_p2(61 downto 31);
                sext_ln703_1_reg_924 <= sext_ln703_1_fu_400_p1;
                sext_ln703_1_reg_924_pp0_iter3_reg <= sext_ln703_1_reg_924;
                sext_ln703_2_reg_929 <= sext_ln703_2_fu_409_p1;
                sext_ln703_2_reg_929_pp0_iter3_reg <= sext_ln703_2_reg_929;
                sext_ln703_3_reg_934 <= sext_ln703_3_fu_413_p1;
                sext_ln703_3_reg_934_pp0_iter3_reg <= sext_ln703_3_reg_934;
                sext_ln703_reg_919 <= sext_ln703_fu_397_p1;
                sext_ln703_reg_919_pp0_iter3_reg <= sext_ln703_reg_919;
                sub_ln1148_5_reg_949 <= sub_ln1148_5_fu_457_p2;
                tmp_4_reg_939 <= ret_V_fu_417_p2(32 downto 32);
                trunc_ln1148_7_reg_944 <= sub_ln1148_4_fu_431_p2(32 downto 1);
                twid_rom_M_imag_V_load_reg_964 <= twid_rom_M_imag_V_q0;
                twid_rom_M_real_V_load_reg_959 <= twid_rom_M_real_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                filter_buf_0_M_imag_V_addr_reg_903 <= zext_ln94_reg_793(9 - 1 downto 0);
                filter_buf_0_M_real_V_addr_reg_893 <= zext_ln94_reg_793(9 - 1 downto 0);
                filter_buf_1_M_imag_V_addr_reg_908 <= zext_ln94_reg_793(9 - 1 downto 0);
                filter_buf_1_M_real_V_addr_reg_898 <= zext_ln94_reg_793(9 - 1 downto 0);
                icmp_ln92_reg_789 <= icmp_ln92_fu_289_p2;
                icmp_ln94_reg_835 <= icmp_ln94_fu_350_p2;
                icmp_ln97_reg_857 <= icmp_ln97_fu_364_p2;
                lhs_V_reg_840 <= lhs_V_fu_356_p3;
                rhs_V_reg_873 <= rhs_V_fu_370_p3;
                tmp_1_reg_819_pp0_iter1_reg <= tmp_1_reg_819;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_reg_857_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                r_V_1_reg_979 <= r_V_1_fu_540_p2;
                r_V_3_reg_989 <= r_V_3_fu_563_p2;
                r_V_4_reg_974 <= r_V_4_fu_534_p2;
                r_V_5_reg_984 <= r_V_5_fu_557_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln92_fu_289_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_reg_819 <= sub_ln703_fu_309_p2(9 downto 9);
                    zext_ln703_reg_813(8 downto 0) <= zext_ln703_fu_319_p1(8 downto 0);
                    zext_ln94_reg_793(8 downto 0) <= zext_ln94_fu_303_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln94_reg_793(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln703_reg_813(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln92_fu_289_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln92_fu_289_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln92_fu_289_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln92_fu_283_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_275_p4) + unsigned(ap_const_lv11_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state9 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln92_fu_289_p2)
    begin
        if ((icmp_ln92_fu_289_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_275_p4_assign_proc : process(i_reg_271, add_ln92_reg_784, ap_CS_fsm_pp0_stage0, icmp_ln92_reg_789, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln92_reg_789 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_275_p4 <= add_ln92_reg_784;
        else 
            ap_phi_mux_i_phi_fu_275_p4 <= i_reg_271;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cdata_M_imag_V_3_fu_721_p3 <= 
        cdata_M_imag_V_fu_573_p2 when (icmp_ln97_reg_857_pp0_iter3_reg(0) = '1') else 
        p_r_M_imag_V_fu_715_p2;
    cdata_M_imag_V_fu_573_p2 <= std_logic_vector(signed(lhs_V_reg_840_pp0_iter3_reg) - signed(lhs_V_4_reg_913_pp0_iter3_reg));
    cdata_M_real_V_3_fu_728_p3 <= 
        cdata_M_real_V_fu_569_p2 when (icmp_ln97_reg_857_pp0_iter3_reg(0) = '1') else 
        p_r_M_real_V_fu_699_p2;
    cdata_M_real_V_fu_569_p2 <= std_logic_vector(signed(lhs_V_4_reg_913_pp0_iter3_reg) + signed(lhs_V_reg_840_pp0_iter3_reg));
    descramble_buf_0_M_imag_V_address0 <= zext_ln703_reg_813(9 - 1 downto 0);
    descramble_buf_0_M_imag_V_address1 <= zext_ln94_reg_793(9 - 1 downto 0);

    descramble_buf_0_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            descramble_buf_0_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_0_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    descramble_buf_0_M_imag_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            descramble_buf_0_M_imag_V_ce1 <= ap_const_logic_1;
        else 
            descramble_buf_0_M_imag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_0_M_real_V_address0 <= zext_ln703_fu_319_p1(9 - 1 downto 0);
    descramble_buf_0_M_real_V_address1 <= zext_ln94_fu_303_p1(9 - 1 downto 0);

    descramble_buf_0_M_real_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            descramble_buf_0_M_real_V_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_0_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    descramble_buf_0_M_real_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            descramble_buf_0_M_real_V_ce1 <= ap_const_logic_1;
        else 
            descramble_buf_0_M_real_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_1_M_imag_V_address0 <= zext_ln703_reg_813(9 - 1 downto 0);
    descramble_buf_1_M_imag_V_address1 <= zext_ln94_reg_793(9 - 1 downto 0);

    descramble_buf_1_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            descramble_buf_1_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_1_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    descramble_buf_1_M_imag_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            descramble_buf_1_M_imag_V_ce1 <= ap_const_logic_1;
        else 
            descramble_buf_1_M_imag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_1_M_real_V_address0 <= zext_ln703_fu_319_p1(9 - 1 downto 0);
    descramble_buf_1_M_real_V_address1 <= zext_ln94_fu_303_p1(9 - 1 downto 0);

    descramble_buf_1_M_real_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            descramble_buf_1_M_real_V_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_1_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    descramble_buf_1_M_real_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            descramble_buf_1_M_real_V_ce1 <= ap_const_logic_1;
        else 
            descramble_buf_1_M_real_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_M_imag_V_fu_673_p3 <= 
        sub_ln1148_3_fu_667_p2 when (tmp_3_fu_633_p3(0) = '1') else 
        trunc_ln1148_5_fu_657_p4;
    f_M_real_V_fu_621_p3 <= 
        sub_ln1148_1_fu_615_p2 when (tmp_2_fu_581_p3(0) = '1') else 
        trunc_ln1148_2_fu_605_p4;
    filter_buf_0_M_imag_V_address0 <= filter_buf_0_M_imag_V_addr_reg_903_pp0_iter5_reg;

    filter_buf_0_M_imag_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            filter_buf_0_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            filter_buf_0_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filter_buf_0_M_imag_V_d0 <= p_r_M_imag_V_3_reg_1010;

    filter_buf_0_M_imag_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln94_reg_835_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln94_reg_835_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            filter_buf_0_M_imag_V_we0 <= ap_const_logic_1;
        else 
            filter_buf_0_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filter_buf_0_M_real_V_address0 <= filter_buf_0_M_real_V_addr_reg_893_pp0_iter5_reg;

    filter_buf_0_M_real_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            filter_buf_0_M_real_V_ce0 <= ap_const_logic_1;
        else 
            filter_buf_0_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filter_buf_0_M_real_V_d0 <= p_r_V_2_reg_1004;

    filter_buf_0_M_real_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln94_reg_835_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln94_reg_835_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            filter_buf_0_M_real_V_we0 <= ap_const_logic_1;
        else 
            filter_buf_0_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filter_buf_1_M_imag_V_address0 <= filter_buf_1_M_imag_V_addr_reg_908_pp0_iter5_reg;

    filter_buf_1_M_imag_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            filter_buf_1_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            filter_buf_1_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filter_buf_1_M_imag_V_d0 <= p_r_M_imag_V_3_reg_1010;

    filter_buf_1_M_imag_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln94_reg_835_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln94_reg_835_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            filter_buf_1_M_imag_V_we0 <= ap_const_logic_1;
        else 
            filter_buf_1_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filter_buf_1_M_real_V_address0 <= filter_buf_1_M_real_V_addr_reg_898_pp0_iter5_reg;

    filter_buf_1_M_real_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            filter_buf_1_M_real_V_ce0 <= ap_const_logic_1;
        else 
            filter_buf_1_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filter_buf_1_M_real_V_d0 <= p_r_V_2_reg_1004;

    filter_buf_1_M_real_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln94_reg_835_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln94_reg_835_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            filter_buf_1_M_real_V_we0 <= ap_const_logic_1;
        else 
            filter_buf_1_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filter_rom_i_address0 <= zext_ln92_fu_333_p1(10 - 1 downto 0);

    filter_rom_i_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            filter_rom_i_ce0 <= ap_const_logic_1;
        else 
            filter_rom_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    g_M_imag_V_fu_503_p3 <= 
        sub_ln1148_7_fu_497_p2 when (tmp_5_fu_463_p3(0) = '1') else 
        trunc_ln1148_3_fu_487_p4;
    g_M_real_V_fu_511_p3 <= 
        trunc_ln1148_7_reg_944 when (tmp_4_reg_939(0) = '1') else 
        sub_ln1148_5_reg_949;
    icmp_ln92_fu_289_p2 <= "1" when (ap_phi_mux_i_phi_fu_275_p4 = ap_const_lv11_400) else "0";
    icmp_ln94_fu_350_p2 <= "1" when (tmp_fu_340_p4 = ap_const_lv2_0) else "0";
    icmp_ln97_fu_364_p2 <= "1" when (i_reg_271 = ap_const_lv11_0) else "0";
    lhs_V_4_fu_377_p3 <= 
        descramble_buf_0_M_imag_V_q1 when (icmp_ln94_reg_835(0) = '1') else 
        descramble_buf_1_M_imag_V_q1;
    lhs_V_fu_356_p3 <= 
        descramble_buf_0_M_real_V_q1 when (icmp_ln94_fu_350_p2(0) = '1') else 
        descramble_buf_1_M_real_V_q1;
    p_r_M_imag_V_fu_715_p2 <= std_logic_vector(unsigned(trunc_ln4_fu_705_p4) + unsigned(f_M_imag_V_fu_673_p3));
    p_r_M_real_V_fu_699_p2 <= std_logic_vector(unsigned(p_r_V_fu_689_p4) + unsigned(f_M_real_V_fu_621_p3));
    p_r_V_fu_689_p4 <= ret_V_3_fu_685_p2(62 downto 31);
    r_V_1_fu_540_p0 <= sext_ln1115_fu_530_p1(32 - 1 downto 0);
    r_V_1_fu_540_p1 <= sext_ln1118_fu_516_p1(32 - 1 downto 0);
    r_V_2_fu_546_p3 <= (twid_rom_M_imag_V_load_reg_964 & ap_const_lv8_0);
    r_V_3_fu_563_p0 <= sext_ln1115_1_fu_553_p1(32 - 1 downto 0);
    r_V_3_fu_563_p1 <= sext_ln1118_1_fu_520_p1(32 - 1 downto 0);
    r_V_4_fu_534_p0 <= sext_ln1115_fu_530_p1(32 - 1 downto 0);
    r_V_4_fu_534_p1 <= sext_ln1118_1_fu_520_p1(32 - 1 downto 0);
    r_V_5_fu_557_p0 <= sext_ln1115_1_fu_553_p1(32 - 1 downto 0);
    r_V_5_fu_557_p1 <= sext_ln1118_fu_516_p1(32 - 1 downto 0);
    r_V_7_fu_758_p1 <= zext_ln1118_fu_748_p1(30 - 1 downto 0);
    r_V_9_fu_752_p1 <= zext_ln1118_fu_748_p1(30 - 1 downto 0);
    r_V_fu_523_p3 <= (twid_rom_M_real_V_load_reg_959 & ap_const_lv8_0);
    ret_V_3_fu_685_p2 <= std_logic_vector(unsigned(r_V_1_reg_979) - unsigned(r_V_3_reg_989));
    ret_V_4_fu_681_p2 <= std_logic_vector(unsigned(r_V_5_reg_984) + unsigned(r_V_4_reg_974));
    ret_V_5_fu_577_p2 <= std_logic_vector(signed(sext_ln703_reg_919_pp0_iter3_reg) + signed(sext_ln703_1_reg_924_pp0_iter3_reg));
    ret_V_6_fu_629_p2 <= std_logic_vector(signed(sext_ln703_3_reg_934_pp0_iter3_reg) + signed(sext_ln703_2_reg_929_pp0_iter3_reg));
    ret_V_7_fu_403_p2 <= std_logic_vector(signed(sext_ln703_fu_397_p1) - signed(sext_ln703_1_fu_400_p1));
    ret_V_fu_417_p2 <= std_logic_vector(signed(sext_ln703_3_fu_413_p1) - signed(sext_ln703_2_fu_409_p1));
    rhs_V_3_fu_391_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln703_fu_384_p3));
    rhs_V_fu_370_p3 <= 
        descramble_buf_1_M_real_V_q0 when (tmp_1_reg_819(0) = '1') else 
        descramble_buf_0_M_real_V_q0;
    select_ln703_fu_384_p3 <= 
        descramble_buf_1_M_imag_V_q0 when (tmp_1_reg_819_pp0_iter1_reg(0) = '1') else 
        descramble_buf_0_M_imag_V_q0;
        sext_ln1115_1_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_fu_546_p3),63));

        sext_ln1115_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_523_p3),63));

        sext_ln1118_1_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(g_M_imag_V_reg_954),63));

        sext_ln1118_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(g_M_real_V_fu_511_p3),63));

        sext_ln703_1_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_reg_840),33));

        sext_ln703_2_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_4_fu_377_p3),33));

        sext_ln703_3_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_3_fu_391_p2),33));

        sext_ln703_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_reg_873),33));

    shl_ln_fu_741_p3 <= (filter_rom_i_load_reg_969_pp0_iter4_reg & ap_const_lv8_0);
    sub_ln1148_1_fu_615_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(trunc_ln1148_1_fu_595_p4));
    sub_ln1148_2_fu_641_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_V_6_fu_629_p2));
    sub_ln1148_3_fu_667_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(trunc_ln1148_4_fu_647_p4));
    sub_ln1148_4_fu_431_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_V_fu_417_p2));
    sub_ln1148_5_fu_457_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(trunc_ln1148_8_fu_447_p4));
    sub_ln1148_6_fu_471_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_V_7_fu_403_p2));
    sub_ln1148_7_fu_497_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(trunc_ln1148_s_fu_477_p4));
    sub_ln1148_fu_589_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_V_5_fu_577_p2));
    sub_ln703_fu_309_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(trunc_ln92_fu_295_p1));
    tmp_2_fu_581_p3 <= ret_V_5_fu_577_p2(32 downto 32);
    tmp_3_fu_633_p3 <= ret_V_6_fu_629_p2(32 downto 32);
    tmp_5_fu_463_p3 <= ret_V_7_fu_403_p2(32 downto 32);
    tmp_fu_340_p4 <= i_reg_271(10 downto 9);
    trunc_ln1148_1_fu_595_p4 <= sub_ln1148_fu_589_p2(32 downto 1);
    trunc_ln1148_2_fu_605_p4 <= ret_V_5_fu_577_p2(32 downto 1);
    trunc_ln1148_3_fu_487_p4 <= ret_V_7_fu_403_p2(32 downto 1);
    trunc_ln1148_4_fu_647_p4 <= sub_ln1148_2_fu_641_p2(32 downto 1);
    trunc_ln1148_5_fu_657_p4 <= ret_V_6_fu_629_p2(32 downto 1);
    trunc_ln1148_8_fu_447_p4 <= ret_V_fu_417_p2(32 downto 1);
    trunc_ln1148_s_fu_477_p4 <= sub_ln1148_6_fu_471_p2(32 downto 1);
    trunc_ln4_fu_705_p4 <= ret_V_4_fu_681_p2(62 downto 31);
    trunc_ln703_fu_315_p1 <= sub_ln703_fu_309_p2(9 - 1 downto 0);
    trunc_ln92_fu_295_p1 <= ap_phi_mux_i_phi_fu_275_p4(10 - 1 downto 0);
    trunc_ln94_fu_299_p1 <= ap_phi_mux_i_phi_fu_275_p4(9 - 1 downto 0);
    twid_rom_M_imag_V_address0 <= zext_ln92_fu_333_p1(10 - 1 downto 0);

    twid_rom_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            twid_rom_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            twid_rom_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    twid_rom_M_real_V_address0 <= zext_ln92_fu_333_p1(10 - 1 downto 0);

    twid_rom_M_real_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            twid_rom_M_real_V_ce0 <= ap_const_logic_1;
        else 
            twid_rom_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1118_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_741_p3),62));
    zext_ln703_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln703_fu_315_p1),64));
    zext_ln92_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_271),64));
    zext_ln94_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln94_fu_299_p1),64));
end behav;
